scalar Time

enum StatusType {
    starting
    running
    waiting
    finished
    failed
}

enum AgentType {
    primary_agent
    reporter
    generator
    refiner
    reflector
    enricher
    adviser
    coder
    memorist
    searcher
    installer
    pentester
    summarizer
}

enum TerminalLogType {
    stdin
    stdout
    stderr
}

enum MessageLogType {
    thoughts
    browser
    terminal
    file
    search
    advice
    ask
    input
    done
}

enum ResultFormat {
    plain
    markdown
    terminal
}

enum ResultType {
    success
    error
}

enum TerminalType {
    primary
    secondary
}

enum VectorStoreAction {
    retrieve
    store
}

type Terminal {
    id: ID!
    type: TerminalType!
    name: String!
    image: String!
    connected: Boolean!
    createdAt: Time!
}

type Flow {
    id: ID!
    title: String!
    status: StatusType!
    terminals: [Terminal!]
    provider: String!
    createdAt: Time!
    updatedAt: Time!
}

type Task {
    id: ID!
    title: String!
    status: StatusType!
    input: String!
    result: String!
    flowId: ID!
    subtasks: [Subtask!]
    createdAt: Time!
    updatedAt: Time!
}

type Subtask {
    id: ID!
    status: StatusType!
    title: String!
    description: String!
    result: String!
    taskId: ID!
    createdAt: Time!
    updatedAt: Time!
}

type AgentLog {
    id: ID!
    initiator: AgentType!
    executor: AgentType!
    task: String!
    result: String!
    flowId: ID!
    taskId: ID
    subtaskId: ID
    createdAt: Time!
}

type MessageLog {
    id: ID!
    type: MessageLogType!
    message: String!
    result: String!
    resultFormat: ResultFormat!
    flowId: ID!
    taskId: ID
    subtaskId: ID
    createdAt: Time!
}

type SearchLog {
    id: ID!
    initiator: AgentType!
    executor: AgentType!
    engine: String!
    query: String!
    result: String!
    flowId: ID!
    taskId: ID
    subtaskId: ID
    createdAt: Time!
}

type TerminalLog {
    id: ID!
    flowId: ID!
    type: TerminalLogType!
    text: String!
    terminal: ID!
    createdAt: Time!
}

type VectorStoreLog {
    id: ID!
    initiator: AgentType!
    executor: AgentType!
    filter: String!
    query: String!
    action: VectorStoreAction!
    result: String!
    flowId: ID!
    taskId: ID
    subtaskId: ID
    createdAt: Time!
}

type Screenshot {
    id: ID!
    flowId: ID!
    name: String!
    url: String!
    createdAt: Time!
}

type Prompt {
    type: String!
    prompt: String!
}

type Query {
    providers: [String!]!
    prompts: [Prompt!]!
    prompt(promptType: String!): String!
    flows: [Flow!]
    flow(flowId: ID!): Flow!
    tasks(flowId: ID!): [Task!]
    screenshots(flowId: ID!): [Screenshot!]
    terminalLogs(flowId: ID!): [TerminalLog!]
    messageLogs(flowId: ID!): [MessageLog!]
    agentLogs(flowId: ID!): [AgentLog!]
    searchLogs(flowId: ID!): [SearchLog!]
    vectorStoreLogs(flowId: ID!): [VectorStoreLog!]
}

type Mutation {
    createFlow(modelProvider: String!, input: String!): Flow!
    putUserInput(flowId: ID!, input: String!): ResultType!
    finishFlow(flowId: ID!): Flow!
    deleteFlow(flowId: ID!): ResultType!
    updatePrompt(promptType: String!, prompt: String!): ResultType!
    resetPrompt(promptType: String!): ResultType!
}

type Subscription {
    flowCreated: Flow!
    flowDeleted: Flow!
    flowUpdated(flowId: ID!): Flow!
    taskCreated(flowId: ID!): Task!
    taskUpdated(flowId: ID!): Task!

    screenshotAdded(flowId: ID!): Screenshot!
    terminalLogAdded(flowId: ID!): TerminalLog!
    messageLogAdded(flowId: ID!): MessageLog!
    messageLogUpdated(flowId: ID!): MessageLog!
    agentLogAdded(flowId: ID!): AgentLog!
    searchLogAdded(flowId: ID!): SearchLog!
    vectorStoreLogAdded(flowId: ID!): VectorStoreLog!
}

fragment flowOverviewFragment on Flow {
    id
    title
    status
}

query flows {
    flows {
        ...flowOverviewFragment
    }
}

query providers {
    providers
}

fragment flowFragment on Flow {
    id
    title
    status
    terminals {
        ...terminalFragment
    }
    provider
    createdAt
    updatedAt
}

fragment terminalFragment on Terminal {
    id
    type
    name
    image
    connected
    createdAt
}

fragment taskFragment on Task {
    id
    title
    status
    input
    result
    flowId
    subtasks {
        ...subtaskFragment
    }
    createdAt
    updatedAt
}

fragment subtaskFragment on Subtask {
    id
    status
    title
    description
    result
    taskId
    createdAt
    updatedAt
}

fragment terminalLogFragment on TerminalLog {
    id
    flowId
    type
    text
    terminal
    createdAt
}

fragment messageLogFragment on MessageLog {
    id
    type
    message
    result
    resultFormat
    flowId
    taskId
    subtaskId
    createdAt
}

fragment screenshotFragment on Screenshot {
    id
    flowId
    name
    url
    createdAt
}

fragment agentLogFragment on AgentLog {
    id
    flowId
    initiator
    executor
    task
    result
    taskId
    subtaskId
    createdAt
}

fragment searchLogFragment on SearchLog {
    id
    flowId
    initiator
    executor
    engine
    query
    result
    taskId
    subtaskId
    createdAt
}

fragment vectorStoreLogFragment on VectorStoreLog {
    id
    flowId
    initiator
    executor
    filter
    query
    action
    result
    taskId
    subtaskId
    createdAt
}

query flow($id: ID!) {
    flow(flowId: $id) {
        ...flowFragment
    }
    tasks(flowId: $id) {
        ...taskFragment
    }
    screenshots(flowId: $id) {
        ...screenshotFragment
    }
    terminalLogs(flowId: $id) {
        ...terminalLogFragment
    }
    messageLogs(flowId: $id) {
        ...messageLogFragment
    }
    agentLogs(flowId: $id) {
        ...agentLogFragment
    }
    searchLogs(flowId: $id) {
        ...searchLogFragment
    }
    vectorStoreLogs(flowId: $id) {
        ...vectorStoreLogFragment
    }
}

query tasks($flowId: ID!) {
    tasks(flowId: $flowId) {
        ...taskFragment
    }
}

mutation createFlow($modelProvider: String!, $input: String!) {
    createFlow(modelProvider: $modelProvider, input: $input) {
        ...flowFragment
    }
}

mutation deleteFlow($flowId: ID!) {
    deleteFlow(flowId: $flowId)
}

mutation putUserInput($flowId: ID!, $input: String!) {
    putUserInput(flowId: $flowId, input: $input)
}

mutation finishFlow($flowId: ID!) {
    finishFlow(flowId: $flowId) {
        ...flowFragment
    }
}

subscription terminalLogAdded($flowId: ID!) {
    terminalLogAdded(flowId: $flowId) {
        ...terminalLogFragment
    }
}

subscription messageLogAdded($flowId: ID!) {
    messageLogAdded(flowId: $flowId) {
        ...messageLogFragment
    }
}

subscription messageLogUpdated($flowId: ID!) {
    messageLogUpdated(flowId: $flowId) {
        ...messageLogFragment
    }
}

subscription screenshotAdded($flowId: ID!) {
    screenshotAdded(flowId: $flowId) {
        ...screenshotFragment
    }
}

subscription agentLogAdded($flowId: ID!) {
    agentLogAdded(flowId: $flowId) {
        ...agentLogFragment
    }
}

subscription searchLogAdded($flowId: ID!) {
    searchLogAdded(flowId: $flowId) {
        ...searchLogFragment
    }
}

subscription vectorStoreLogAdded($flowId: ID!) {
    vectorStoreLogAdded(flowId: $flowId) {
        ...vectorStoreLogFragment
    }
}

subscription flowUpdated($flowId: ID!) {
    flowUpdated(flowId: $flowId) {
        id
        status
        terminals {
            ...terminalFragment
        }
        updatedAt
    }
}

subscription taskCreated($flowId: ID!) {
    taskCreated(flowId: $flowId) {
        ...taskFragment
    }
}

subscription taskUpdated($flowId: ID!) {
    taskUpdated(flowId: $flowId) {
        id
        status
        result
        subtasks {
            ...subtaskFragment
        }
        updatedAt
    }
}
